import { useState } from "react";
import { i18nPro } from "i18n-pro";
export const useI18nPro = () => {
    const [locale, setLocale] = useState(i18nPro.defaultLocale);
    const updateLocaleState = (newLocale) => {
        if (newLocale) {
            setLocale(newLocale);
        }
        return newLocale || '';
    };
    const changeLanguage = (...args) => {
        const newLocale = args[0];
        if (!newLocale) {
            const errMsg = "Provide a locale";
            console.error(errMsg);
            return Promise.reject({ message: errMsg, data: newLocale });
        }
        const messages = typeof args[1] === 'object' || typeof JSON.parse(args[1]) === 'object' ? args[1] : undefined;
        const apiUrl = typeof args[1] === 'string' ? args[1] : undefined;
        if (messages) {
            return i18nPro.loadLocalMessages(newLocale, messages).then(updateLocaleState);
        }
        if (apiUrl) {
            return i18nPro.loadMessages(newLocale, apiUrl).then(updateLocaleState);
        }
        return Promise.reject({ message: 'Argouments provided are not valid', data: { newLocale, args: args[1] } });
    };
    return {
        locale,
        t: i18nPro.t,
        changeLanguage
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlSTE4blByby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob29rL3VzZUkxOG5Qcm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNqQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBY25DLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDN0IsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxRQUFRLENBQVMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXBFLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxTQUE2QixFQUFVLEVBQUU7UUFDbEUsSUFBSSxTQUFTLEVBQUM7WUFDWixTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDckI7UUFDRCxPQUFPLFNBQVMsSUFBSSxFQUFFLENBQUE7SUFDeEIsQ0FBQyxDQUFBO0lBRUQsTUFBTSxjQUFjLEdBQW1CLENBQUMsR0FBRyxJQUFJLEVBQW1CLEVBQUU7UUFDbEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQztZQUNsQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUE7U0FDNUQ7UUFDRCxNQUFNLFFBQVEsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7UUFDN0csTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtRQUMvRCxJQUFJLFFBQVEsRUFBQztZQUNYLE9BQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtTQUM5RTtRQUNELElBQUcsTUFBTSxFQUFDO1lBQ1IsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtTQUN2RTtRQUNELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxJQUFJLEVBQUUsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQTtJQUN6RyxDQUFDLENBQUE7SUFFRCxPQUFPO1FBQ0wsTUFBTTtRQUNOLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNaLGNBQWM7S0FDZixDQUFBO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgaTE4blBybyB9IGZyb20gXCJpMThuLXByb1wiO1xyXG5cclxuaW50ZXJmYWNlIENoYW5nZUxhbmd1YWdlIHtcclxuICAoXHJcbiAgICBsb2NhbGU6IHN0cmluZyxcclxuICAgIG1lc3NhZ2VzOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+XHJcbiAgKTogUHJvbWlzZTxzdHJpbmc+O1xyXG4gIChcclxuICAgIGxvY2FsZTogc3RyaW5nLFxyXG4gICAgYXBpVXJsOiBzdHJpbmdcclxuICApOiBQcm9taXNlPHN0cmluZz47XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgdXNlSTE4blBybyA9ICgpID0+IHtcclxuICBjb25zdCBbbG9jYWxlLCBzZXRMb2NhbGVdID0gdXNlU3RhdGU8c3RyaW5nPihpMThuUHJvLmRlZmF1bHRMb2NhbGUpO1xyXG5cclxuICBjb25zdCB1cGRhdGVMb2NhbGVTdGF0ZSA9IChuZXdMb2NhbGU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyA9PiB7XHJcbiAgICBpZiAobmV3TG9jYWxlKXtcclxuICAgICAgc2V0TG9jYWxlKG5ld0xvY2FsZSlcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdMb2NhbGUgfHwgJydcclxuICB9XHJcblxyXG4gIGNvbnN0IGNoYW5nZUxhbmd1YWdlOiBDaGFuZ2VMYW5ndWFnZSA9ICguLi5hcmdzKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcclxuICAgIGNvbnN0IG5ld0xvY2FsZSA9IGFyZ3NbMF0gXHJcbiAgICBpZiAoIW5ld0xvY2FsZSkge1xyXG4gICAgICAgIGNvbnN0IGVyck1zZyA9IFwiUHJvdmlkZSBhIGxvY2FsZVwiO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe21lc3NhZ2U6IGVyck1zZywgZGF0YTogbmV3TG9jYWxlfSlcclxuICAgIH1cclxuICAgIGNvbnN0IG1lc3NhZ2VzID0gdHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBKU09OLnBhcnNlKGFyZ3NbMV0pID09PSAnb2JqZWN0JyA/IGFyZ3NbMV0gOiB1bmRlZmluZWRcclxuICAgIGNvbnN0IGFwaVVybCA9IHR5cGVvZiBhcmdzWzFdID09PSAnc3RyaW5nJz8gYXJnc1sxXSA6IHVuZGVmaW5lZFxyXG4gICAgaWYgKG1lc3NhZ2VzKXtcclxuICAgICAgcmV0dXJuIGkxOG5Qcm8ubG9hZExvY2FsTWVzc2FnZXMobmV3TG9jYWxlLCBtZXNzYWdlcykudGhlbih1cGRhdGVMb2NhbGVTdGF0ZSlcclxuICAgIH1cclxuICAgIGlmKGFwaVVybCl7XHJcbiAgICAgIHJldHVybiBpMThuUHJvLmxvYWRNZXNzYWdlcyhuZXdMb2NhbGUsIGFwaVVybCkudGhlbih1cGRhdGVMb2NhbGVTdGF0ZSlcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7bWVzc2FnZTogJ0FyZ291bWVudHMgcHJvdmlkZWQgYXJlIG5vdCB2YWxpZCcsIGRhdGE6IHtuZXdMb2NhbGUsIGFyZ3M6IGFyZ3NbMV19fSlcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBsb2NhbGUsXHJcbiAgICB0OiBpMThuUHJvLnQsXHJcbiAgICBjaGFuZ2VMYW5ndWFnZVxyXG4gIH1cclxufVxyXG4iXX0=